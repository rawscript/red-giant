
{
    "info": {
        "name": "Red Giant Protocol - Test Suite",
        "description": "Comprehensive test collection for Red Giant Protocol exposure system",
        "version": "1.0.0"
    },
    "item": [
        {
            "name": "Health Check",
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{base_url}}/health",
                    "host": ["{{base_url}}"],
                    "path": ["health"]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test('Status is healthy', function () {",
                            "    const response = pm.response.json();",
                            "    pm.expect(response.status).to.eql('healthy');",
                            "});",
                            "",
                            "pm.test('C-Core is active', function () {",
                            "    const response = pm.response.json();",
                            "    pm.expect(response.c_core).to.be.true;",
                            "});",
                            "",
                            "pm.test('Response time is acceptable', function () {",
                            "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "Upload Small Text",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "X-File-Name",
                        "value": "small_test.txt"
                    },
                    {
                        "key": "Content-Type",
                        "value": "text/plain"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "Red Giant Protocol Test Data - Small File"
                },
                "url": {
                    "raw": "{{base_url}}/upload",
                    "host": ["{{base_url}}"],
                    "path": ["upload"]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test('Upload successful', function () {",
                            "    const response = pm.response.json();",
                            "    pm.expect(response.status).to.eql('success');",
                            "});",
                            "",
                            "pm.test('File ID generated', function () {",
                            "    const response = pm.response.json();",
                            "    pm.expect(response.file_id).to.be.a('string');",
                            "    pm.globals.set('test_file_id', response.file_id);",
                            "});",
                            "",
                            "pm.test('Processing metrics available', function () {",
                            "    const response = pm.response.json();",
                            "    pm.expect(response.bytes_processed).to.be.above(0);",
                            "    pm.expect(response.chunks_processed).to.be.above(0);",
                            "    pm.expect(response.throughput_mbps).to.be.above(0);",
                            "});",
                            "",
                            "pm.test('Surface completion status', function () {",
                            "    const response = pm.response.json();",
                            "    pm.expect(response.surface_complete).to.be.a('boolean');",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "Upload Large Binary Data",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "X-File-Name",
                        "value": "large_binary.bin"
                    },
                    {
                        "key": "Content-Type",
                        "value": "application/octet-stream"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{{large_test_data}}"
                },
                "url": {
                    "raw": "{{base_url}}/upload",
                    "host": ["{{base_url}}"],
                    "path": ["upload"]
                }
            },
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "// Generate 1MB of test data",
                            "const chunkSize = 1024;",
                            "const chunks = 1024;",
                            "let data = '';",
                            "for (let i = 0; i < chunks; i++) {",
                            "    data += 'X'.repeat(chunkSize);",
                            "}",
                            "pm.globals.set('large_test_data', data);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test('Large upload successful', function () {",
                            "    const response = pm.response.json();",
                            "    pm.expect(response.status).to.eql('success');",
                            "});",
                            "",
                            "pm.test('Multiple chunks processed', function () {",
                            "    const response = pm.response.json();",
                            "    pm.expect(response.chunks_processed).to.be.above(1);",
                            "});",
                            "",
                            "pm.test('High throughput achieved', function () {",
                            "    const response = pm.response.json();",
                            "    pm.expect(response.throughput_mbps).to.be.above(10);",
                            "});",
                            "",
                            "pm.test('Processing time reasonable', function () {",
                            "    const response = pm.response.json();",
                            "    pm.expect(response.processing_time_ms).to.be.below(5000);",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "Upload JSON Data",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "X-File-Name",
                        "value": "test_data.json"
                    },
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n    \"protocol\": \"Red Giant\",\n    \"version\": \"1.0\",\n    \"features\": {\n        \"exposure_based\": true,\n        \"c_core\": true,\n        \"high_performance\": true,\n        \"multi_threaded\": true\n    },\n    \"test_data\": {\n        \"timestamp\": \"2025-01-01T00:00:00Z\",\n        \"size\": \"large\",\n        \"performance_target\": \"500+ MB/s\"\n    },\n    \"metrics\": {\n        \"throughput\": 500,\n        \"latency\": 1.2,\n        \"success_rate\": 99.9\n    }\n}"
                },
                "url": {
                    "raw": "{{base_url}}/upload",
                    "host": ["{{base_url}}"],
                    "path": ["upload"]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test('JSON upload successful', function () {",
                            "    const response = pm.response.json();",
                            "    pm.expect(response.status).to.eql('success');",
                            "});",
                            "",
                            "pm.test('Content type detected', function () {",
                            "    const response = pm.response.json();",
                            "    pm.expect(response.content_type).to.include('json');",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "Download File",
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{base_url}}/download/{{test_file_id}}",
                    "host": ["{{base_url}}"],
                    "path": ["download", "{{test_file_id}}"]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test('Download successful', function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test('Content length header present', function () {",
                            "    pm.expect(pm.response.headers.get('Content-Length')).to.be.a('string');",
                            "});",
                            "",
                            "pm.test('File content matches', function () {",
                            "    const responseText = pm.response.text();",
                            "    pm.expect(responseText).to.include('Red Giant Protocol');",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "Get Metrics",
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{base_url}}/metrics",
                    "host": ["{{base_url}}"],
                    "path": ["metrics"]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test('Metrics available', function () {",
                            "    const response = pm.response.json();",
                            "    pm.expect(response.total_requests).to.be.above(0);",
                            "    pm.expect(response.total_bytes).to.be.above(0);",
                            "    pm.expect(response.success_rate).to.be.above(0);",
                            "});",
                            "",
                            "pm.test('Performance metrics present', function () {",
                            "    const response = pm.response.json();",
                            "    pm.expect(response.average_latency_ms).to.be.a('number');",
                            "    pm.expect(response.max_throughput_mbps).to.be.a('number');",
                            "});",
                            "",
                            "pm.test('C-Core metrics available', function () {",
                            "    const response = pm.response.json();",
                            "    pm.expect(response.c_core_elapsed_ms).to.be.a('number');",
                            "    pm.expect(response.c_core_throughput).to.be.a('number');",
                            "});",
                            "",
                            "pm.test('Error tracking working', function () {",
                            "    const response = pm.response.json();",
                            "    pm.expect(response.error_count).to.be.a('number');",
                            "    pm.expect(response.empty_requests).to.be.a('number');",
                            "    pm.expect(response.oversized_requests).to.be.a('number');",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "List Files",
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{base_url}}/files",
                    "host": ["{{base_url}}"],
                    "path": ["files"]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test('Files list available', function () {",
                            "    const response = pm.response.json();",
                            "    pm.expect(response.files).to.be.an('array');",
                            "    pm.expect(response.count).to.be.a('number');",
                            "});",
                            "",
                            "pm.test('File metadata complete', function () {",
                            "    const response = pm.response.json();",
                            "    if (response.files.length > 0) {",
                            "        const file = response.files[0];",
                            "        pm.expect(file.id).to.be.a('string');",
                            "        pm.expect(file.name).to.be.a('string');",
                            "        pm.expect(file.size).to.be.a('number');",
                            "        pm.expect(file.hash).to.be.a('string');",
                            "        pm.expect(file.md5_hash).to.be.a('string');",
                            "    }",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "Edge Case - Empty Upload",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "X-File-Name",
                        "value": "empty.txt"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": ""
                },
                "url": {
                    "raw": "{{base_url}}/upload",
                    "host": ["{{base_url}}"],
                    "path": ["upload"]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test('Empty upload handled gracefully', function () {",
                            "    pm.response.to.have.status(500);",
                            "});",
                            "",
                            "pm.test('Error message clear', function () {",
                            "    const responseText = pm.response.text();",
                            "    pm.expect(responseText).to.include('empty');",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "Edge Case - Oversized Upload",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "X-File-Name",
                        "value": "oversized.bin"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{{oversized_data}}"
                },
                "url": {
                    "raw": "{{base_url}}/upload",
                    "host": ["{{base_url}}"],
                    "path": ["upload"]
                }
            },
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "// Generate 15MB of data (exceeds 10MB buffer)",
                            "const chunkSize = 1024;",
                            "const chunks = 15 * 1024;",
                            "let data = '';",
                            "for (let i = 0; i < chunks; i++) {",
                            "    data += 'X'.repeat(chunkSize);",
                            "}",
                            "pm.globals.set('oversized_data', data);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test('Oversized upload rejected', function () {",
                            "    pm.response.to.have.status(500);",
                            "});",
                            "",
                            "pm.test('Size limit error message', function () {",
                            "    const responseText = pm.response.text();",
                            "    pm.expect(responseText).to.include('too large');",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "Stress Test - Multiple Concurrent Uploads",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "X-File-Name",
                        "value": "stress_test_{{$randomInt}}.txt"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "Stress test data for Red Giant Protocol - Upload #{{$randomInt}} at {{$timestamp}}"
                },
                "url": {
                    "raw": "{{base_url}}/upload",
                    "host": ["{{base_url}}"],
                    "path": ["upload"]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test('Concurrent upload successful', function () {",
                            "    const response = pm.response.json();",
                            "    pm.expect(response.status).to.eql('success');",
                            "});",
                            "",
                            "pm.test('Performance under load', function () {",
                            "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Set base URL if not already set",
                    "if (!pm.globals.get('base_url')) {",
                    "    pm.globals.set('base_url', 'http://localhost:5000');",
                    "}"
                ]
            }
        },
        {
            "listen": "test",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Global assertions for all requests",
                    "pm.test('Response time acceptable', function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                    "});",
                    "",
                    "pm.test('No server errors in headers', function () {",
                    "    pm.expect(pm.response.headers.get('X-Error')).to.be.undefined;",
                    "});"
                ]
            }
        }
    ],
    "variable": [
        {
            "key": "base_url",
            "value": "http://localhost:5000",
            "type": "string"
        }
    ]
}
